(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4/365/24
(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4/365/24/3328
1200*(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4/365/24/3328
34061207-34057793
?all
all(1:10==FALSE)
all(1:10==NULL)
1:10==NULL
logical(0)
all(logical(0))
3*43+3*30
3*43+3*30+3.15*34
3*43+3*30+6*14+3.15*34
3*43+3*30+6*14
3*43+3*30+6*14+3.15*34
3*43+3*30+6*14+40
3*43+3*30+6*14+3.15*34+40
360*1.25
76.5*9
source("http://bioconductor.org/biocLite.R")
biocLite("quantsmooth")
library(GenomeGraphs)
biocLite("GenomeGraphs")
library(GenomeGraphs)
library(biomaRt)
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")#
minbase <- 180292097#
maxbase <- 180492096
genesplus <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "+", chromosome = "3",#
biomart = mart)
genesmin <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "-", chromosome = "3",#
biomart = mart)#
seg <- makeSegmentation(segStart, segEnd,#
segments, dp = DisplayPars(color = "black",#
lwd = 2, lty = "solid"))
?makeGenericArray
ideo <- makeIdeogram(chromosome=11)
gdplot(list(a=ideo))
gdPlot(list(a=ideo))
gdPlot(list(a=ideo),minBase=0,maxBase=120000000)
minbase <- 13517534 #
maxbase <- 69458602#
#
ideo <- makeIdeogram(chromosome=11)
gdPlot(list(a=ideo),minBase=minbase,maxBase=maxbase)
gdPlot(list(a=ideo,b=makeGenomeAxis(add53=TRUE,add35=TRUE)),minBase=minbase,maxBase=maxbase)
?makeGeneRegion
genesplus <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "+", chromosome = "3",#
biomart = mart)
genesmin <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "-", chromosome = "3",#
biomart = mart)
gdPlot(list(a=ideo,b=makeGenomeAxis(add53=TRUE,add35=TRUE),c=genesplus),minBase=minbase,maxBase=maxbase)
```
Try clustering with bootstrapping (pvclust) on gut samples.
568/700
568/780
282/440
63+131+240+532+131+287+298
198+190+85
198+190+85+429
782+1474
198+190
429+85
3185+2548+650+3251
191+153+39+195
9634*0.06
271*1.25
248*1.25
50000-10472-17790+37701+1918
52000*12
790000/12
71/47
2194/1877
1/(2194/1877)
224+114+168+209+40+65+332+215
11000-319-218-1367
?kruskal.test
539288
539288/4
4500 * 0.2897
4500 * 0.06
4500 + 270 + 1304 + 89
10500 - (89+94+58+83+466) - 317
10500 - (89+94+58+83+466) - 317 + 1100
10500 - (89+94+58+83+466) - 317 -218 + 1100
486*2 + 486*2.5*0.5
setwd("/Volumes/Time Machine Backups/MOOC")
source("http://bioconductor.org/biocLite.R")
biocLite('DESeq2')
biocLite('SRAdb')
s
samples
labels <- c("C02","C03","C06","C08","C09","C11","C13","C15","C19","C23","N02","N03","N06","N08","N09","N11","N13","N15","N19","N23")
samples <- c("SRR057629","SRR057630","SRR057632","SRR057634","SRR057635","SRR057636","SRR057637","SRR057638","SRR057641","SRR057642")
samples
labels
for (s in samples){
r1 = paste(s,"1.fastq.gz",sep="_")
r2 = paste(s,"2.fastq.gz",sep="_")
system(paste("gunzip", r1))
system(paste("gunzip", r2))
align(index="./my_index",readfile1=paste(s,"1.fastq",sep="_"),readfile2=paste(s,"2.fastq",sep="_"),output_file=paste(s,"sam",sep="."),nthreads=3,unique=TRUE)
}
library(Rsubread)
for (s in samples){
r1 = paste(s,"1.fastq.gz",sep="_")
r2 = paste(s,"2.fastq.gz",sep="_")
system(paste("gunzip", r1))
system(paste("gunzip", r2))
align(index="./my_index",readfile1=paste(s,"1.fastq",sep="_"),readfile2=paste(s,"2.fastq",sep="_"),output_file=paste(s,"sam",sep="."),nthreads=3,unique=TRUE)
}
ind <- rbind(c(2,4,6),c(56,57,58))
ind
afr <- rbind(c(0,0,3),c(40,30,20))
afr
pvals = apply(m, 1, function(r) t.test(ind,afr)$p.value)
t.test(ind[1,],afr[1,])
t.test(ind[1,],afr[1,])$p
t.test(ind[1,],afr[1,])$p.value
source("http://bioconductor.org/biocLite.R")
biocLite('DESeq2')
82+232+61+53+71+52+68
10500+500-619-343
10*1500*0.5
plotPC(f.nozero, 1, 2, "Published FPKM values \n SVD \n n=13333", colors=colors)
RawReads~SVDcomps: SVD-PC1="0.313026"SVD-PC2="0.299388"## MappedReads~SVDcomps: SVD-PC1="0.468184"SVD-PC2="0.129162"## Layout~SVDcomps: SVD-PC1="0.855132"SVD-PC2="0.361310"## Prep~SVDcomps: SVD-PC1="0.153042"SVD-PC2="0.220671"## Study~SVDcomps: SVD-PC1="0.368849"SVD-PC2="0.433066"## Tissue~SVDcomps: SVD-PC1="0.030197"SVD-PC2="0.106604"
x <- c(0.03, 0.10, 0.37, 0.43, 0.15, 0.22, 0.86, 0.36)
p.adjust(x)
x <- c(0.03, 0.10, 0.37, 0.43, 0.15, 0.22, 0.86, 0.36, 0.31, 0.30)
p.adjust(x)
423 * 1.25
library(DESeq2)
?DESeqDataSetFromHTSeq
??DESeqDataSetFromHTSeqCount
-776*2
978/12
a = c(2,3)
sum(a) # this is to ...
installed.packages()
dir()
dir(recursive=T)
getwd()
dir()
?dir
dim(M) <- c(10,5)
example(plot)
>plot()
setup("927035174951-mqeh6nt9343bl9rku11m1e6d7lg64hhi.apps.googleusercontent.com","-o_-FHrvI5lT1_pRwI98Y4E5")
source("~/Desktop/allt/GoogleGenomics/api-client-r/genomics-api.R")
setup("927035174951-mqeh6nt9343bl9rku11m1e6d7lg64hhi.apps.googleusercontent.com","-o_-FHrvI5lT1_pRwI98Y4E5")
source("~/Desktop/allt/GoogleGenomics/api-client-r/genomics-api.R")
setup("927035174951-mqeh6nt9343bl9rku11m1e6d7lg64hhi.apps.googleusercontent.com","-o_-FHrvI5lT1_pRwI98Y4E5")
sessionInfo()
read.delim("clipboard")
read.delim(pipe("pbpaste"))
?pipe
pipe('pbpaste')
pipe(open='pbpaste')
pipe("pbpaste")
pipe("pbpaste",open="pbpaste")
pipe("pbpaste")
system("pbpaste")
x <- system("pbpaste")
x
x <- read.delim(system("pbpaste"))
options(warn=-1)
x <- read.delim(system("pbpaste"))
x <- read.delim(pipe("pbpaste"))
x
x <- read.delim(pipe("pbpaste"),header=F)
x
x <- read.delim(pipe("pbpaste"),header=F)
x
myDataSetName <- #
scbGetData(url = #
#
"http://api.scb.se/OV0104/v1/doris/sv/ssd/HS/HS0301/DodaOrsak",#
dims = list(Region = c('00'),#
Dodsorsak = c('TOT'),#
Alder = c('0'),#
Kon = c('*'),#
ContentsCode = c('HS0301A1'),#
Tid = c('*')),#
clean = TRUE)
library(sweSCB)
myDataSetName <- #
scbGetData(url = #
#
"http://api.scb.se/OV0104/v1/doris/sv/ssd/HS/HS0301/DodaOrsak",#
dims = list(Region = c('00'),#
Dodsorsak = c('TOT'),#
Alder = c('0'),#
Kon = c('*'),#
ContentsCode = c('HS0301A1'),#
Tid = c('*')),#
clean = TRUE)
myDataSetName
ls()
x[1]
x[0]
typeof(x)
x <- c(1,2,3)
x[0]
x <- data.frame(x=c(2,3),y=c(1,4))
x
x[0]
typeof(x)
x <- as.factor(1,2,3)
x <- as.factor(c(1,2,3))
x
as.numeric(x)
x <- as.factor(c(3,2,1))
x
as.numeric(x)
x <- as.factor(3:1)
x
as.numeric(x)
setwd("/Users/mikaelhuss1/")
setwd("/Users/mikaelhuss/")
example(rep)
?read.csv
x <- 0:2#
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",#
#
lwd=4, ylim= c(0,0.6)) #
#
curve(dnorm(x, 1, 0.8), add=T)
dbinom(x, 2, 0.5)
dbinom(x, 8, 0.5)
dbinom(x, 30, 0.5)
x <- 0:2#
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue",#
#
lwd=4, ylim= c(0,0.6)) #
#
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:2#
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue",#
#
lwd=4, ylim= c(0,0.6)) #
#
curve(dnorm(x, 15, 2.8), add=T)
x <- 0:30#
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue",#
#
lwd=4, ylim= c(0,0.6)) #
#
curve(dnorm(x, 15, 2.8), add=T)
sqrt(30*0.5*(1-0.5))
30*0.5*(1-0.5)
set.seed(400)#
NORMAL <- rnorm(10000)#
UNIFORM <- runif(10000)#
SKEWED <- rep(1:140, 1:140)#
opar <- par() #Save original par settings. Read ?par() if you like#
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph#
hist(NORMAL)#
hist(UNIFORM)#
hist(SKEWED)#
par(opar) #Reset the graph parameters#
#Reset can also be achieved by closing the Graphics window
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph#
sampl <- vector() #Create an empty vector#
for(i in 1:1000) #Start a loop with 1000 rounds#
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=T)))#
#fill sampl with sampl, and the mean of three random items from NORMAL#
mean(sampl) #
sd(sampl)#
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )#
sampl <- vector()#
for(i in 1:1000)#
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))#
mean(sampl)#
sd(sampl)#
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )#
sampl <- vector()#
for(i in 1:1000)#
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))#
mean(sampl)#
sd(sampl)#
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
sd(sampl)/sqrt(300)
sd(sampl)*sqrt(300)
NORMAL
sd(NORMAL)
sd(sampl)*sqrt(300)
x <- rnorm(100000) #
y <- rnorm(100000) #
z <- rep(NA, 100000) #z is created empty but with a given size. #
system.time({ #
for (i in 1:100000) { #
z[i] <- x[i] + y[i] #
} #
})
system.time( k <- x + y )
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
length(which(ME<=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,12:24],1,mean) > 0)
length(keep)
sum(keep)
head(keep)
head(ME)
t.test(ME[,1:12],ME[,13:24])
t.test(ME[,1:12],ME[,13:24])$p
t.test(ME[,1:12],ME[,13:24])$p.value
x <- function(MD){t.test(ME[,1:12],ME[,13:24])$p.value}
x <- function(ME){t.test(ME[,1:12],ME[,13:24])$p.value}
apply(ME, 1, x)
test <- function(x){t.test(x[1:12],x[13:24])$p.value}
test(ME[1,])
apply(ME,1,test)
P <- apply(ME,1,test)
which(P<0.05)
length(which(P<0.05))
length(which(P=<0.05))
length(which(P<=0.05))
?t.test
test <- function(x){t.test(x[1:12],x[13:24],var.equal=T)$p.value}
P <- apply(ME,1,test)
length(which(P=<0.05))
length(which(P<=0.05))
install.packages("ops")
602+853
setwd("~/Desktop/allt/PublicDataProject/tissuernaseq")
source('~/.active-rstudio-document', echo=TRUE)
q <- melt(cufflinks_log[,])
colnames(q) <- c("sample_ID","logFPKM")
meta <- sampleinfo_cufflinks[,c("Study","Tissue","Preparation","NumberRaw","Numbermapped","Readtype")]
rownames(meta) <- colnames(cufflinks_log)
tissue <- rep(meta$Tissue, each=nrow(cufflinks_log))
study <- rep(meta$Study, each=nrow(cufflinks_log))
prep <- rep(meta$Preparation, each=nrow(cufflinks_log))
layout <- rep(meta$Readtype, each=nrow(cufflinks_log))
data <- data.frame(q, tissue=tissue, study=study, prep=prep, layout=layout)
fit <- lm(logFPKM ~ layout + prep + nraw + study + tissue, data=data)
e <- anova(fit)
maxval = 100
barplot(100*e$"Sum Sq"[1:5]/sum(e$"Sum Sq"[1:5]),names.arg=rownames(e[1:5,]),main="Anova, Cufflinks log2 FPKM",ylim=c(0,maxval))
meta <- data.frame(study=c(rep("EoGE",3),rep("Atlas",3),rep("BodyMap",3),rep("HPA",3),rep("AltIso",2)),tissue=c("Brain","Heart","Kidney","Brain","Heart","Kidney","Brain","Heart","Kidney","Brain","Heart","Kidney","Brain","Heart"),prep=c(rep("poly-A",3),rep("rRNA-depl",3),rep("poly-A",8)),layout=c(rep("PE",3),rep("SE",3),rep("PE",6),rep("SE",2)))
batch <- meta$study
design <- model.matrix(~as.factor(tissue),data=meta)
combat.cufflinks <- ComBat(dat=cufflinks_log,batch=batch,mod=design,numCovs=NULL,par.prior=TRUE)
rownames(combat.cufflinks) <- rownames(cufflinks_log)
#write.table(combat, file="reprocessed_rpkms_combat_log2.txt", quote=F)
pheatmap(cor(combat.cufflinks),method="spearman")
p.combat.cufflinks <- prcomp(t(combat.cufflinks))
plot(p.combat.cufflinks$x[,1],p.combat.cufflinks$x[,2],pch=20,col=colors,xlab=paste("PC1 54% of variance"),ylab=paste("PC2 37% of variance"),main="Cufflinks FPKM values \n COMBAT \n n=19,475")
legend("bottomleft",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
plot(p.combat.cufflinks$x[,2],p.combat.cufflinks$x[,3],pch=20,col=colors,xlab=paste("PC2 37% of variance"),ylab=paste("PC3 2% of variance"),main="Cufflinks FPKM values \n COMBAT \n n=19,475")
legend("bottomright",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
par(mfrow=c(4,4))
for (i in 1:6){
for(j in 1:6){
if (i<j){
plot(p.combat.cufflinks$x[,i],p.combat.cufflinks$x[,j],pch=20,col=colors,xlab=paste("PC",i),ylab=paste("PC",j),main="Cufflinks FPKM values \n COMBAT \ n=19,475")
}
}
}
#PC1:
load.pc1 <- p.combat.cufflinks$rotation[,1][order(p.combat.cufflinks$rotation[,1])]
extreme.pc1 <- c(tail(load.pc1), head(load.pc1))
extreme.pc1.ensg <- names(extreme.pc1)
extreme.pc1.symbols <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values=extreme.pc1.ensg,
mart=ensembl)
q <- extreme.pc1.symbols[,2]
names(q) <- extreme.pc1.symbols[,1]
barplot(extreme.pc1, names.arg=q[extreme.pc1.ensg],las=2,main="Genes w highest absolute loadings in PC1 (COMBAT Cufflinks    FPKM)")
#PC2:
load.pc2 <- p.combat.cufflinks$rotation[,2][order(p.combat.cufflinks$rotation[,2])]
extreme.pc2 <- c(tail(load.pc2), head(load.pc2))
extreme.pc2.ensg <- names(extreme.pc2)
extreme.pc2.symbols <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values=extreme.pc2.ensg,
mart=ensembl)
q <- extreme.pc2.symbols[,2]
names(q) <- extreme.pc2.symbols[,1]
barplot(extreme.pc2, names.arg=q[extreme.pc2.ensg],las=2,main="Genes w highest absolute loadings in PC2 (COMBAT Cufflinks    FPKM)")
#PC3:
load.pc3 <- p.combat.cufflinks$rotation[,3][order(p.combat.cufflinks$rotation[,3])]
extreme.pc3 <- c(tail(load.pc3), head(load.pc3))
extreme.pc3.ensg <- names(extreme.pc3)
extreme.pc3.symbols <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values=extreme.pc3.ensg,
mart=ensembl)
q <- extreme.pc3.symbols[,2]
names(q) <- extreme.pc3.symbols[,1]
barplot(extreme.pc3, names.arg=q[extreme.pc3.ensg],las=2,main="Genes w highest absolute loadings in PC3 (COMBAT Cufflinks    FPKM)")
q <- melt(combat.cufflinks)
colnames(q) <- c("sample_ID","combat")
meta <- sampleinfo_cufflinks[,c("Study","Tissue","Preparation","NumberRaw","Numbermapped","Readtype")]
rownames(meta) <- colnames(combat.cufflinks)
tissue <- rep(meta$Tissue, each=nrow(combat.cufflinks))
study <- rep(meta$Study, each=nrow(combat.cufflinks))
prep <- rep(meta$Preparation, each=nrow(combat.cufflinks))
layout <- rep(meta$Readtype, each=nrow(combat.cufflinks))
raw <- rep(meta$NumberRaw, each=nrow(combat.cufflinks))
mapped <- rep(meta$Numbermapped, each=nrow(combat.cufflinks))
data <- data.frame(q, tissue=tissue, study=study, prep=prep, layout=layout,nraw=raw,nmapped=mapped)
fit <- lm(combat ~ prep + nraw + layout + study + tissue, data=data)
f <- anova(fit)
maxval = 100
barplot(100*f$"Sum Sq"/sum(f$"Sum Sq"),names.arg=rownames(f),main="Anova Cufflinks Combat",ylim=c(0,maxval))
plot(p.combat.cufflinks$x[,1],p.combat.cufflinks$x[,2],pch=20,col=colors,xlab=paste("PC1 54% of variance"),ylab=paste("PC2 37% of variance"),main="Cufflinks FPKM values \n COMBAT \n n=19,475")
par(mfrow=c(1,1))
plot(p.combat.cufflinks$x[,1],p.combat.cufflinks$x[,2],pch=20,col=colors,xlab=paste("PC1 54% of variance"),ylab=paste("PC2 37% of variance"),main="Cufflinks FPKM values \n COMBAT \n n=19,475")
legend("bottomleft",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
tissue
design <- model.matrix(~as.factor(tissue),data=meta)
design
batch
design <- model.matrix(~as.factor(tissue),data=meta)
design
head(meta)
meta <- data.frame(study=c(rep("HPA",3),rep("AltIso",2),rep("GTex",3),rep("Atlas",3)),tissue=c("Heart","Brain","Kidney","Heart","Brain","Heart","Brain","Kidney","Heart","Brain","Kidney"))
batch <- meta$study
design <- model.matrix(~as.factor(tissue),data=meta)
design
tissue=c("Heart","Brain","Kidney","Heart","Brain","Heart","Brain","Kidney","Heart","Brain","Kidney")
tissue.scrambled=tissue[sample(tissue,length(tissue))]
tissue.scrambled
tissue
sample(x=tissue,size=length(tissue))
tissue.scrambled <- sample(x=tissue,size=length(tissue))
tissue.scrambled <- sample(x=meta$tissue,size=length(meta$tissue))
tissue.scrambled
table(tissue.scrambled)
batch <- meta$study
design <- model.matrix(~as.factor(tissue.scrambled))
design
combat <- ComBat(dat=published.log,batch=batch,mod=design,numCovs=NULL,par.prior=TRUE)
pheatmap(cor(combat))
p.combat <- prcomp(t(combat))
plot(p.combat$x[,1],p.combat$x[,2],pch=20,col=colors,xlab=paste("PC1 54% of variance"),ylab=paste("PC2 38% of variance"),main="Published FPKM values \n COMBAT \n n=13,323")
as.numeric(tissues.scrambled)
as.numeric(tissues.scramble)
as.numeric(tissue.scrambled)
p.combat <- prcomp(t(combat))
plot(p.combat$x[,1],p.combat$x[,2],pch=20,col=colors,xlab=paste("PC1 ,main="Published FPKM values \n COMBAT \n n=13,323 \nScrambled labels")
p.combat <- prcomp(t(combat))
plot(p.combat$x[,1],p.combat$x[,2],pch=20,col=colors,xlab="PC1",ylab="PC2",main="Published FPKM values \n COMBAT \n n=13,323 \nScrambled labels")
p.combat <- prcomp(t(combat))
plot(p.combat$x[,1],p.combat$x[,2],pch=20,col=as.numeric(tissues.scrambled),xlab="PC1",ylab="PC2",main="Published FPKM values \n COMBAT \n n=13,323 \nScrambled labels")
p.combat <- prcomp(t(combat))
plot(p.combat$x[,1],p.combat$x[,2],pch=20,col=as.numeric(tissue.scrambled),xlab="PC1",ylab="PC2",main="Published FPKM values \n COMBAT \n n=13,323 \nScrambled labels")
tissue.scrambled
as.numeric(tissue.scrambled)
legend("topright",legend=c("'Brain'","'Heart'","'Kidney'"),col=as.numeric(tissue.scrambled),cex=1.5,pch=20,bty="n")
tissue.scrambled
tissue
batch <- meta$study
design <- model.matrix(~as.factor(tissue),data=meta)
combat <- ComBat(dat=published.log,batch=batch,mod=design,numCovs=NULL,par.prior=TRUE)
p.combat <- prcomp(t(combat))
plot(p.combat$x[,1],p.combat$x[,2],pch=20,col=as.numeric(meta$tissue),xlab="PC1",ylab="PC2",main="Published FPKM values \n COMBAT \n n=13,323")
legend("topright",legend=c("Heart","Brain","Kidney"),col=as.numeric(tissue.scrambled),cex=1.5,pch=20,bty="n")
colors <- c("indianred", "dodgerblue", "forestgreen",
"indianred", "dodgerblue",
"indianred", "dodgerblue", "forestgreen",
"indianred", "dodgerblue", "forestgreen")
p.log <- prcomp(t(published.log))
plot(p.log$x[,1],p.log$x[,2],pch=20,col=colors,xlab=paste("PC1 31% of variance"),ylab=paste("PC2 27% of variance"),main="log2 Published FPKM/RPKM values \n n=13,323")
legend("bottomright",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
plot(p.log$x[,2],p.log$x[,3],pch=20,col=colors,xlab=paste("PC2 27% of variance"),ylab=paste("PC3 19% of variance"),main="log2 Published FPKM values \n n=13,323")
legend("bottomright",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
head(published.log)
meta
p.loo <- published.log[,-4:5]
p.loo <- published.log[,-c(4,5)]
head(p.loo)
p.loo.log <- prcomp(t(p.loo))
plot(p.log$x[,1],p.log$x[,2],pch=20,col=colors,xlab=paste("PC1 31% of variance"),ylab=paste("PC2 27% of variance"),main="log2 Published FPKM/RPKM values \n n=13,323")
plot(p.loo.log$x[,1],p.loo.log$x[,2],pch=20,col=colors,xlab=paste("PC1 31% of variance"),ylab=paste("PC2 27% of variance"),main="log2 Published FPKM/RPKM values \n n=13,323")
colors.loo <- colors[-c(4,5)]
colors
plot(p.loo.log$x[,1],p.loo.log$x[,2],pch=20,col=colors,xlab="PC1",ylab="PC2",main="log2 Published FPKM/RPKM values \n n=13,323"
)
plot(p.loo.log$x[,1],p.loo.log$x[,2],pch=20,col=colors.loo,xlab="PC1",ylab="PC2",main="log2 Published FPKM/RPKM values \n n=13,323"))
plot(p.loo.log$x[,1],p.loo.log$x[,2],pch=20,col=colors.loo,xlab="PC1",ylab="PC2",main="log2 Published FPKM/RPKM values \n n=13,323")
colors
colors.loo
head(p.loo)
plot(p.loo.log$x[,2],p.loo.log$x[,3],pch=20,col=colors.loo,xlab="PC2",ylab="PC3",main="log2 Published FPKM/RPKM values \n n=13,323")
legend("bottomright",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
plot(p.loo.log$x[,2],p.loo.log$x[,3],pch=20,col=colors.loo,xlab="PC2",ylab="PC3",main="log2 Published FPKM/RPKM values \n n=13,323")
legend("bottomleft",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
head(p.loo.log)
summary(head(p.loo.log))
dim(p.loo.log$rotation)
head(p.loo.log$rotation)
dim(p.add)
p.add <- published.log[,c(4,5)]
dim(p.add)
head(p.loo.log$rotation)
dim(p.loo.log$rotation)
dim(t(p.loo.log$rotation))
projection <- t(p.add) %*% p.loo.log$rotation
head(projection)
points(projection[,c(2,3)],pch=22)
plot(p.loo.log$x[,2],p.loo.log$x[,3],pch=20,col=colors.loo,xlab="PC2",ylab="PC3",main="log2 Published FPKM/RPKM values \n n=13,323",xlim=c(-150,100))
points(projection[,c(2,3)],pch=22)
points(projection[,c(2,3)],pch=22, col=colors[c(4,5)])
legend("bottomleft",legend=c("Heart","Brain","Kidney"),col=c("indianred", "dodgerblue", "forestgreen"),cex=1.5,pch=20,bty="n")
