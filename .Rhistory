pval.study.svd2 <- kruskal.test(svd.scores.12[,2], sampleinfo$Study)$p.value
cat(sprintf("Study~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.study.svd1,pval.study.svd2))
# Tissue
pval.tissue.svd1 <- kruskal.test(svd.scores.12[,1], sampleinfo$Tissue)$p.value
pval.tissue.svd2 <- kruskal.test(svd.scores.12[,2], sampleinfo$Tissue)$p.value
cat(sprintf("Tissue~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.tissue.svd1,pval.tissue.svd2))
}
print_PCA_SVD_corrs(f.nozero)
print_PCA_SVD_corrs(fpkms.log)
print_PCA_SVD_corrs(combat)
library(pheatmap)
library(calibrate)
f <- read.delim("fpkm_table_tophat.txt")
do.SVD = function(m, comp.1=1, comp.2=2){ # returns eig.cell
s <- svd(m)
ev <- s$d^2 / sum(s$d^2)
return(s$u[,c(comp.1, comp.2)])
}
project.SVD <- function(m, eig.cell){
return(t(m) %*% eig.cell)
}
plot.SVD <- function(m, comp.1=1, comp.2=2, groups=rep("blue", ncol(m)), title=""){
eig <- do.SVD(m, comp.1, comp.2)
proj <- project.SVD(m, eig)
xminv <- min(proj[,1]) # - .2 * abs(min(proj[,1]))
xmaxv <- max(proj[,1]) # + .2 * abs(max(proj[,1]))
yminv <- min(proj[,2]) # - .2 * abs(min(proj[,2]))
ymaxv <- max(proj[,2]) # + .2 * abs(max(proj[,2]))
plot(proj,pch=20,col="white",xlim=c(xminv,xmaxv),ylim=c(yminv,ymaxv),xaxt='n',yaxt='n',xlab="PC1",ylab="PC2",main=title)
points(proj, col=as.character(groups),pch=20) # , #pch=c(rep(15,3),rep(17,3),rep(19,3),rep(18,3),rep(20,2)), cex=2)
textxy(proj[,1],proj[,2],labs=colnames(m))
}
loadings.SVD <- function(m, comp=1, gene.ids = rownames(m)){
s <- svd(m)
l <- s$u[,comp]
names(l) <- gene.ids
l.s <- l[order(l)]
return(l.s)
}
plot.loadings.SVD <- function(m, comp=1, cutoff=0.1, gene.ids = rownames(m)){
l <- loadings.SVD(m, comp, gene.ids)
barplot(l[abs(l)>cutoff],las=2,main=paste("PC", comp, "cutoff", cutoff),cex.names=0.6)
}
plotPC <- function(matrix,a,b,desc,colors){
eig <- do.SVD(matrix, a, b)
proj <- project.SVD(matrix, eig)
xminv <- min(proj[,1]) - .2 * abs(min(proj[,1]))
xmaxv <- max(proj[,1]) + .2 * abs(max(proj[,1]))
yminv <- min(proj[,2]) - .2 * abs(min(proj[,2]))
ymaxv <- max(proj[,2]) + .2 * abs(max(proj[,2]))
plot(proj,pch=20,xlim=c(xminv,xmaxv),ylim=c(yminv,ymaxv),xaxt='n',yaxt='n',xlab=paste0("PC",a),ylab=paste("PC",b),col=colors,main=desc)
textxy(proj[,1],proj[,2],labs=rownames(proj))
}
library(biomaRt)
f_ids <- as.vector(f[,1])
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl") #select the ensembl database
gene_type <- getBM(attributes=c("ensembl_gene_id", "gene_biotype"),
filters = "ensembl_gene_id",
values=f_ids,
mart=ensembl)
pc <- subset(gene_type[,1],gene_type[,2]=="protein_coding")
f_pc <- f[match(pc,f[,1]),]
write.table(f_pc_nozero, file="cufflinks_fpkm_proteincoding_nozero.txt", quote=F)
f_pc_nozero <- f_pc[-which(rowSums(f_pc[,3:16])<=0.01),]
write.table(f_pc_nozero, file="cufflinks_fpkm_proteincoding_nozero.txt", quote=F)
pheatmap(cor(f_pc_nozero[,3:16], method="spearman"))
pheatmap(cor(f_pc_nozero[,3:16]))
pseudo <- 1
logs <- log2(f_pc_nozero[,3:16] + pseudo)
fpkms.log <- cbind(f_pc_nozero[,1:2],logs)
pheatmap(cor(fpkms.log[,3:16]))
f.nolow <- f_pc_nozero[-which(rowMeans(f_pc_nozero[,3:16])<1),]
pheatmap(cor(log2(f.nolow[,3:16] + pseudo)))
colors <- c(2,1,3,2,1,3,2,1,3,2,1,3,2,1)
plotPC(f_pc_nozero[,3:16], 1, 2, "Reprocessed FPKM values \n SVD \n n=19524", colors=colors)
plotPC(f_pc_nozero[,3:16], 2, 3, "Reprocessed FPKM values \n SVD \n n=19524", colors=colors)
colors <- c(2,1,3,2,1,3,2,1,3,2,1,3,2,1)
par(mfrow=c(4,4))
for (i in 1:6){
for(j in 1:6){
if (i<j){
plotPC(f_pc_nozero[,3:16],i,j,desc="",colors=colors)
}
}
}
plotPC(fpkms.log[,3:16], 1, 2, desc="Reprocessed F/RPKM values, log2 \n SVD \n n=19475", colors=colors)
plotPC(fpkms.log[,3:16], 2, 3, desc="Reprocessed FPKM values, log2 \n SVD \n n=19475", colors=colors)
source('~/.active-rstudio-document', echo=TRUE)
plotPC(fpkms.log[,3:16], 1, 2, desc="Reprocessed F/RPKM values, log2 \n SVD \n n=19475", colors=colors)
plotPC(fpkms.log[,3:16], 2, 3, desc="Reprocessed FPKM values, log2 \n SVD \n n=19475", colors=colors)
library(sva)
meta <- data.frame(study=c(rep("EoGE",3),rep("Atlas",3),rep("BodyMap",3),rep("HPA",3),rep("AltIso",2)),tissue=c("Brain","Heart","Kidney","Brain","Heart","Kidney","Brain","Heart","Kidney","Brain","Heart","Kidney","Brain","Heart"),prep=c(rep("poly-A",3),rep("rRNA-depl",3),rep("poly-A",8)),layout=c(rep("PE",3),rep("SE",3),rep("PE",6),rep("SE",2)))
batch <- meta$study
design <- model.matrix(~as.factor(tissue),data=meta)
combat <- ComBat(dat=fpkms.log[,3:16],batch=batch,mod=design,numCovs=NULL,par.prior=TRUE)
write.table(combat, file="reprocessed_rpkms_combat_log2.txt", quote=F)
sampleinfo
sampleinfo <- read.delim("sample_info_reprocessed.txt")
draw.quad.venn(100, 100, 100, 100,
length(intersect(EoGE_kc,Atlas_kc)),
length(intersect(EoGE_kc,BodyMap_kc)),
length(intersect(EoGE_kc,HPA_kc)),
length(intersect(Atlas_kc,BodyMap_kc)),
length(intersect(Atlas_kc,HPA_kc)),
length(intersect(BodyMap_kc,HPA_kc)),
length(intersect(intersect(EoGE_kc,Atlas_kc),BodyMap_kc)),
length(intersect(intersect(EoGE_kc,Atlas_kc),HPA_kc)),
length(intersect(intersect(EoGE_kc,BodyMap_kc),HPA_kc)),
length(intersect(intersect(Atlas_kc,BodyMap_kc),HPA_kc)),
length(intersect(intersect(EoGE_kc,Atlas_kc),intersect(BodyMap_kc,HPA_kc))),
category = c("EoGE","Atlas","BodyMap","HPA"), lwd = rep(0, 4), lty = rep("solid", 4),
fill = c("mistyrose","steelblue","lightgoldenrod","darkseagreen")
)
```{r:PC-correlation}
print_PCA_SVD_corrs <- function(data){
pca <- prcomp(t(data[,]))
#var.percent <- ((pca$sdev)^2)/sum(pca$sdev^2) *100
#var.percent <- (pca$d^2 / sum(pca$d^2) ) *100
#barplot(var.percent[1:5], xlab="PC", ylab="Percent Variance",names.arg=1:length(var.percent[1:5]), las=1,ylim=c(0,max(var.percent[1:5])+10), col="gray")
rot <- pca$r
x <- pca$x
#plot(pca)
#summary(pca)
#screeplot(pca,type=c("lines"))
# Test correlations between number of seq'd reads and PCs 1-4 from prcomp
pval.nraw.pc1 <- cor.test(x[,1], sampleinfo$NumberRaw,method="spearman")$p.value
pval.nraw.pc2 <- cor.test(x[,2], sampleinfo$NumberRaw,method="spearman")$p.value
pval.nraw.pc3 <- cor.test(x[,3], sampleinfo$NumberRaw,method="spearman")$p.value
pval.nraw.pc4 <- cor.test(x[,4], sampleinfo$NumberRaw,method="spearman")$p.value
cat(sprintf("Number_of_rawreads~PCAs: PCA1=\"%f\"PCA2=\"%f\"PCA3=\"%f\"PCA4=\"%f\n", pval.nraw.pc1,pval.nraw.pc2,pval.nraw.pc3,pval.nraw.pc4))
# Thus no significant correlations between no of seq'd reads and PCs 1-4
pval.nmapped.pc1 <- cor.test(x[,1], sampleinfo$Numbermapped,method="spearman")$p.value
pval.nmapped.pc2 <- cor.test(x[,2], sampleinfo$Numbermapped,method="spearman")$p.value
pval.nmapped.pc3 <- cor.test(x[,3], sampleinfo$Numbermapped,method="spearman")$p.value
pval.nmapped.pc4 <- cor.test(x[,4], sampleinfo$Numbermapped,method="spearman")$p.value
cat(sprintf("Number_of_mappedreads~PCAs: PCA1=\"%f\"PCA2=\"%f\"PCA3=\"%f\"PCA4=\"%f\n", pval.nmapped.pc1,pval.nmapped.pc2,pval.nmapped.pc3,pval.nmapped.pc4))
# For tissue, use kruskal.test which handles ordinal variables
pval.tissue.pc1<-kruskal.test(x[,1], sampleinfo$Tissue)$p.value
pval.tissue.pc2<-kruskal.test(x[,2], sampleinfo$Tissue)$p.value
pval.tissue.pc3<-kruskal.test(x[,3], sampleinfo$Tissue)$p.value
pval.tissue.pc4<-kruskal.test(x[,4], sampleinfo$Tissue)$p.value
cat(sprintf("Tissues~PCAs: PCA1=\"%f\"PCA2=\"%f\"PCA3=\"%f\"\n", pval.tissue.pc1,pval.tissue.pc2,pval.tissue.pc3,pval.tissue.pc4))
# Library prep
pval.prep.pc1<-kruskal.test(x[,1], sampleinfo$Preparation)$p.value
pval.prep.pc2<-kruskal.test(x[,2], sampleinfo$Preparation)$p.value
pval.prep.pc3<-kruskal.test(x[,3], sampleinfo$Preparation)$p.value
pval.prep.pc4<-kruskal.test(x[,4], sampleinfo$Preparation)$p.value
cat(sprintf("LibPrep~PCAs: PCA1=\"%f\"PCA2=\"%f\"PCA3=\"%f\"\n", pval.prep.pc1,pval.prep.pc2,pval.prep.pc3,pval.prep.pc4))
# Study
pval.study.pc1<-kruskal.test(x[,1], sampleinfo$Study)$p.value
pval.study.pc2<-kruskal.test(x[,2], sampleinfo$Study)$p.value
pval.study.pc3<-kruskal.test(x[,3], sampleinfo$Study)$p.value
pval.study.pc4<-kruskal.test(x[,4], sampleinfo$Study)$p.value
cat(sprintf("Study~PCAs: PCA1=\"%f\"PCA2=\"%f\"PCA3=\"%f\"\n", pval.study.pc1,pval.study.pc2,pval.study.pc3,pval.study.pc4))
# Layout
pval.layout.pc1<-kruskal.test(x[,1], sampleinfo$readlength)$p.value
pval.layout.pc2<-kruskal.test(x[,2], sampleinfo$readlength)$p.value
pval.layout.pc3<-kruskal.test(x[,3], sampleinfo$readlength)$p.value
pval.layout.pc4<-kruskal.test(x[,4], sampleinfo$readlengt)$p.value
cat(sprintf("ReadType~PCAs: PCA1=\"%f\"PCA2=\"%f\"PCA3=\"%f\"\n", pval.layout.pc1,pval.layout.pc2,pval.layout.pc3,pval.layout.pc4))
# To test:
# same for logged values
# same for ComBat
# svd() without mean subtraction instead
#svd.12 <- do.SVD(f.nozero, comp.1=1, comp.2=2)
#svd.scores.12 <- project.SVD(f.nozero, svd.12)
svd.12 <- do.SVD(data, comp.1=1, comp.2=2)
svd.scores.12 <- project.SVD(data, svd.12)
# Number of raw reads
pval.nraw.svd1 <- cor.test(svd.scores.12[,1], sampleinfo$NumberRaw,method="spearman")$p.value
pval.nraw.svd2 <- cor.test(svd.scores.12[,2], sampleinfo$NumberRaw,method="spearman")$p.value
cat(sprintf("RawReads~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.nraw.svd1,pval.nraw.svd2))
# Number of mapped reads
pval.nmapped.svd1 <- cor.test(svd.scores.12[,1], sampleinfo$Numbermapped,method="spearman")$p.value
pval.nmapped.svd2 <- cor.test(svd.scores.12[,2], sampleinfo$Numbermapped,method="spearman")$p.value
cat(sprintf("MappedReads~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.nmapped.svd1,pval.nmapped.svd2))
# Layout / read length
pval.layout.svd1 <- kruskal.test(svd.scores.12[,1], sampleinfo$Readtype)$p.value
pval.layout.svd2 <- kruskal.test(svd.scores.12[,2], sampleinfo$Readtype)$p.value
cat(sprintf("Layout~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.layout.svd1,pval.layout.svd2))
# Prep
pval.prep.svd1 <- kruskal.test(svd.scores.12[,1], sampleinfo$Preparation)$p.value
pval.prep.svd2 <- kruskal.test(svd.scores.12[,2], sampleinfo$Preparation)$p.value
cat(sprintf("Prep~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.prep.svd1,pval.prep.svd2))
# Study
pval.study.svd1 <- kruskal.test(svd.scores.12[,1], sampleinfo$Study)$p.value
pval.study.svd2 <- kruskal.test(svd.scores.12[,2], sampleinfo$Study)$p.value
cat(sprintf("Study~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.study.svd1,pval.study.svd2))
# Tissue
pval.tissue.svd1 <- kruskal.test(svd.scores.12[,1], sampleinfo$Tissue)$p.value
pval.tissue.svd2 <- kruskal.test(svd.scores.12[,2], sampleinfo$Tissue)$p.value
cat(sprintf("Tissue~SVDcomps: SVD-PC1=\"%f\"SVD-PC2=\"%f\"\n", pval.tissue.svd1,pval.tissue.svd2))
}
print_PCA_SVD_corrs(f_pc_nozero)
head(f_pc_nozero)
print_PCA_SVD_corrs(f_pc_nozero[,3:16])
print_PCA_SVD_corrs(fpkms.log)
head(fpkms.log)
print_PCA_SVD_corrs(fpkms.log[,3:16])
head(combat)
print_PCA_SVD_corrs(combat)
setwd("~/Desktop/allt/HiSeq/kg_wiman_11_01/reanalysis")
library(limma)
library(edgeR)
library(calibrate)
library(pheatmap)
opts <- NULL;
for (C in c("HCT", "Saos2")) {
for (i in c("01", "02", "03")) {
for (M in c("input", "IP")) {
for (T in c("F", "FW", "FWpm")) {
if (C == "HCT" & T == "FWpm") {next}
opts <- c(opts, paste(M, T, i, C, sep="_")) #generates column names
}}}}
normalize.voom <- function(counts){
require(limma)
return(voom(counts)$E)
}
cpm.tmm <- function(counts, groups=NA){
require(edgeR)
if(is.na(groups)){
d<-DGEList(counts=counts)
}
else{
d<-DGEList(counts=counts, group=groups)
}
d <- calcNormFactors(d, method="TMM")
return(cpm(d, normalized.lib.sizes=TRUE))
}
plot.SVD <- function(m, comp.1=1, comp.2=2, groups=rep("blue", ncol(m)), title=""){
eig <- do.SVD(m, comp.1, comp.2)
proj <- project.SVD(m, eig)
xminv <- min(proj[,1])  - .05 * abs(min(proj[,1]))
xmaxv <- max(proj[,1])  + .05 * abs(max(proj[,1]))
yminv <- min(proj[,2])  - .1 * abs(min(proj[,2]))
ymaxv <- max(proj[,2])  + .1 * abs(max(proj[,2]))
plot(proj,pch=20,col="white",xlim=c(xminv,xmaxv),ylim=c(yminv,ymaxv),xaxt='n',yaxt='n',xlab="PC1",ylab="PC2",main=title)
points(proj, col=as.character(groups),pch=20) # , #pch=c(rep(15,3),rep(17,3),rep(19,3),rep(18,3),rep(20,2)), cex=2)
textxy(proj[,1],proj[,2],labs=colnames(m))
}
counts <- read.delim("count_table.txt", sep="\t")
colnames(counts)<-opts
tmm <- cpm.tmm(counts)
log.cpm.tmm <- normalize.voom(tmm)
p <- prcomp(t(log.cpm.tmm))
comp1 <- 1
comp2 <- 2
plot(p$x[,c(comp1,comp2)],pch=20,main=paste0("PCs ", comp1, ",", comp2),xlim=c(min(p$x[,comp1])+0.2*min(p$x[,comp1]),max(p$x[,comp1])+0.2*max(p$x[,comp1])),col=c(rep("red",12),rep("blue",18)))
textxy(p$x[,comp1],p$x[,comp2],labs=colnames(log.cpm.tmm))
h <- counts[,1:12]
h.tmm <- cpm.tmm(h)
h.dual <- normalize.voom(h.tmm)
p <- prcomp(t(h.tmm))
comp1 <- 1
comp2 <- 2
#pdf("HCT116.pdf")
plot(p$x[,c(comp1,comp2)],pch=20,main=paste0("HCT116, PCs ", comp1, ",", comp2),xlim=c(min(p$x[,comp1])+0.5*min(p$x[,comp1]),max(p$x[,comp1])+0.2*max(p$x[,comp1])),col=rep(c("lightblue","darkblue","red","orange"),3))
legend("bottomright",legend=c("input_F","input_FW","IP_F","IP_FW"),col=c("lightblue","darkblue","red","orange"),pch=20)
textxy(p$x[,comp1],p$x[,comp2],labs=colnames(h.tmm))
#dev.off()
s <- counts[,13:30]
s.tmm <- cpm.tmm(s)
s.dual <- normalize.voom(s.tmm)
p <- prcomp(t(s.tmm))
comp1 <- 1
comp2 <- 2
#pdf("Saos2.pdf")
plot(p$x[,c(comp1,comp2)],pch=20,main=paste0("Saos2, PCs ", comp1, ",", comp2),xlim=c(min(p$x[,comp1])+0.5*min(p$x[,comp1]),max(p$x[,comp1])+0.2*max(p$x[,comp1])),col=rep(c("lightblue","darkblue","purple","red","orange","yellow"),3))
legend(x=0,y=-10000,legend=c("input_F","input_FW","input_FWpm","IP_F","IP_FW","IP_FWpm"),col=c("lightblue","darkblue","purple","red","orange","yellow"),pch=20)
plot(p$x[,c(comp1,comp2)],pch=20,main=paste0("Saos2, PCs ", comp1, ",", comp2),xlim=c(min(p$x[,comp1])+0.5*min(p$x[,comp1]),max(p$x[,comp1])+0.2*max(p$x[,comp1])),col=rep(c("lightblue","darkblue","purple","red","orange","yellow"),3))
legend(x=0,y=-10000,legend=c("input_F","input_FW","input_FWpm","IP_F","IP_FW","IP_FWpm"),col=c("lightblue","darkblue","purple","red","orange","yellow"),pch=20)
textxy(p$x[,comp1],p$x[,comp2],labs=colnames(s.tmm))
textxy(p$x[,comp1],p$x[,comp2],labs=colnames(s.tmm))
#dev.off()
actual <- c(1,2,3,4,6,5,7,8,10,9,12,11)
h.a <- h
colnames(h.a) <- colnames(h)[actual]
h.a.tmm <- cpm.tmm(h.a)
FI <- c("input.F", "input.FW", "IP.F", "IP.FW","input.FW","input.F","IP.F","IP.FW","input.FW","input.F","IP.FW","IP.F")
FI <- factor(FI, levels=c("input.F","input.FW","IP.F","IP.FW"))
design <- model.matrix(~0+FI)
colnames(design)<-levels(FI)
#vc <- voom(h.a.tmm, design)
h.a <- h.a[rowSums(h.a)>5,]
vc <- voom(h.a, design)
fit <- lmFit(vc, design)
cont.matrix <- makeContrasts(Diff=(IP.FW-IP.F)-(input.FW-input.F),levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
sigs <- topTable(fit2, adjust="BH", number=1000000, p.value=0.05) # 2512 in this case
correctdir <- sigs[sigs$logFC>0,] # 2335
limma.sig.geneids <- rownames(correctdir)
write.table(limma.sig.geneids, "sign_ENSG_HCT116_limma.txt", quote=F, row.names=F, col.names=F)
### --- PLOTTING --- ###
fpkm <- read.delim(file="fpkm_table.txt",stringsAsFactors=FALSE)
f.hct <- fpkm[,1:14]
colnames(f.hct)<-c("ENSEMBL_gene","Gene_symbol",opts[actual])
spl <- function(s){
a <- unlist(strsplit(s,"_"))
return(paste(a[1],a[2],sep="_"))
}
plotfpkm <- function(gene){
f <- f.hct[f.hct[,1]==gene,]
print(f[,2])
num <- as.numeric(f[,3:ncol(f)])
short_names <- unlist(lapply(colnames(f[,3:ncol(f)]), spl))
print(short_names)
input.F <- num[c(1,6,10)]
input.FW <- num[c(2,5,9)]
IP.F <- num[c(3,7,12)]
IP.FW <- num[c(4,8,11)]
boxplot(input.F, input.FW, IP.F, IP.FW, main = f[,2], col=c("red","blue","red","blue"), names = c("input.F","input.FW","IP.F","IP.FW"))
}
pdf("top100_HCT.pdf")
for (g in rownames(correctdir)[1:100]){
plotfpkm(g)
#	readline()
}
dev.off()
logs <- vector()
# Fold changes for top DE genes. More useful to look at IP-FW vs. input-FW
for (g in rownames(correctdir)){
ipfw <- vc$E[g,c(4,8,11)]
inputfw <- vc$E[g,c(2,5,9)]
# Or: input <- vc$E[g,c(1,2,5,6,9,10)]
logFC <- mean(ipfw) - mean(inputfw)
logs <- c(logs, logFC)
}
correctdir$logIPFWinputFW <- logs
write.table(correctdir,file="reanalysis_HCT116_enriched.txt",sep="\t",quote=FALSE)
par(mfrow=c(1,1))
ipfw <- rowMeans(vc$E[,c(4,8,11)])
inputfw <- rowMeans(vc$E[,c(2,5,9)])
plot(ipfw~inputfw, pch=20, xlab="Input-FW normalized counts", ylab="IP-FW normalized counts", main="HCT-116")
points(ipfw[rownames(correctdir)]~inputfw[rownames(correctdir)],col="red",pch=20)
# First select only those containing FW and F
s.nopm <- s[,c(1,2,4,5,7,8,10,11,13,14,16,17)]
FI <- c("input.F","input.FW","IP.F","IP.FW","input.F","input.FW","IP.F","IP.FW","input.F","input.FW","IP.F","IP.FW")
FI <- factor(FI, levels=c("input.F","input.FW","IP.F","IP.FW"))
design <- model.matrix(~0+FI)
colnames(design)<-levels(FI)
s.nopm <- s.nopm[rowSums(s.nopm)>=5,]
vc <- voom(s.nopm, design)
fit <- lmFit(vc, design)
cont.matrix <- makeContrasts(Diff=(IP.FW-IP.F)-(input.FW-input.F),levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
sigs <- topTable(fit2, adjust="BH", number=1000000, p.value=0.05)
dim(sigs)
correctdir <- sigs[sigs$logFC>0,]
limma.sig.geneids <- rownames(correctdir)
dim(correctdir)
write.table(limma.sig.geneids, "sign_ENSG_Saos2_F_limma.txt", quote=F, row.names=F, col.names=F)
# First select only those containing FW and FWpm
s.pm <- s[,c(2,3,5,6,8,9,11,12,14,15,17,18)]
FI <- c("input.FW","input.FWpm","IP.FW","IP.FWpm","input.FW","input.FWpm","IP.FW","IP.FWpm","input.FW","input.FWpm","IP.FW","IP.FWpm")
FI <- factor(FI, levels=c("input.FW","input.FWpm","IP.FW","IP.FWpm"))
design <- model.matrix(~0+FI)
colnames(design)<-levels(FI)
s.pm <- s.pm[rowSums(s.pm)>=5,]
vc <- voom(s.pm, design)
fit <- lmFit(vc, design)
cont.matrix <- makeContrasts(Diff=(IP.FW-IP.FWpm)-(input.FW-input.FWpm),levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
sigs.pm <- topTable(fit2, adjust="BH", number=1000000, p.value=0.05)
dim(sigs.pm)
correctdir.pm <- sigs.pm[sigs.pm$logFC>0,]
limma.sig.geneids <- rownames(correctdir.pm)
dim(correctdir.pm)
write.table(limma.sig.geneids, "sign_ENSG_Saos2_pm_limma.txt", quote=F, row.names=F, col.names=F)
ipfw <- rowMeans(vc$E[,c(4,8,11)])
inputfw <- rowMeans(vc$E[,c(2,5,9)])
plot(ipfw~inputfw, pch=20, xlab="Input-FW normalized counts", ylab="IP-FW normalized counts", main="HCT-116")
points(ipfw[rownames(correctdir)]~inputfw[rownames(correctdir)],col="red",pch=20)
fpkm <- read.delim(file="fpkm_table.txt",stringsAsFactors=FALSE)
f.saos <- fpkm[,c(1:2,15:32)]
colnames(f.saos)<-c("ENSEMBL_gene","Gene_symbol",opts[13:30])
spl <- function(s){
a <- unlist(strsplit(s,"_"))
return(paste(a[1],a[2],sep="_"))
}
plotfpkm <- function(gene){
f <- f.saos[f.saos[,1]==gene,]
print(f[,2])
num <- as.numeric(f[,3:ncol(f)])
short_names <- unlist(lapply(colnames(f[,3:ncol(f)]), spl))
print(short_names)
input.F <- num[c(1,7,13)]
input.FW <- num[c(2,8,14)]
input.FWpm <- num[c(3,9,15)]
IP.F <- num[c(4,10,16)]
IP.FW <- num[c(5,11,17)]
IP.FWpm <- num[c(6,12,18)]
boxplot(input.F, input.FW, input.FWpm, IP.F, IP.FW, IP.FWpm, main = f[,2], col=c("red","blue","orange","red","blue","orange"), names = c("input.F","input.FW","input.FWpm","IP.F","IP.FW","IP.FWpm"))
}
for (g in rownames(correctdir.pm)[1:30]){
plotfpkm(g)
readline()
}
head(vc)
logs <- vector()
# Fold changes for top DE genes. More useful to look at IP-FW vs. input-FW
for (g in rownames(correctdir)){
ipfw <- vc$E[g,c(4,8,11)]
inputfw <- vc$E[g,c(2,5,9)]
# Or: input <- vc$E[g,c(1,2,5,6,9,10)]
logFC <- mean(ipfw) - mean(inputfw)
logs <- c(logs, logFC)
}
correctdir$logIPFWinputFW <- logs
write.table(correctdir,file="reanalysis_HCT116_enriched.txt",sep="\t",quote=FALSE)
ipfw <- rowMeans(vc$E[,c(3,7,11)])
inputfw <- rowMeans(vc$E[,c(1,5,9)])
plot(ipfw~inputfw, pch=20, xlab="Input-FW normalized counts", ylab="IP-FW normalized counts", main="Saos2")
points(ipfw[rownames(correctdir)]~inputfw[rownames(correctdir)],col="red",pch=20)
f_pc_nozero <- read.table(file="cufflinks_fpkm_proteincoding_nozero.txt")
setwd("~/Desktop/allt/PublicDataProject/tissuernaseq")
f_pc_nozero <- read.table(file="cufflinks_fpkm_proteincoding_nozero.txt")
library(pheatmap)
library(calibrate)
f <- read.delim("fpkm_table_tophat.txt")
sampleinfo <- read.delim("sample_info_reprocessed.txt")
do.SVD = function(m, comp.1=1, comp.2=2){ # returns eig.cell
s <- svd(m)
ev <- s$d^2 / sum(s$d^2)
return(s$u[,c(comp.1, comp.2)])
}
project.SVD <- function(m, eig.cell){
return(t(m) %*% eig.cell)
}
plot.SVD <- function(m, comp.1=1, comp.2=2, groups=rep("blue", ncol(m)), title=""){
eig <- do.SVD(m, comp.1, comp.2)
proj <- project.SVD(m, eig)
xminv <- min(proj[,1]) # - .2 * abs(min(proj[,1]))
xmaxv <- max(proj[,1]) # + .2 * abs(max(proj[,1]))
yminv <- min(proj[,2]) # - .2 * abs(min(proj[,2]))
ymaxv <- max(proj[,2]) # + .2 * abs(max(proj[,2]))
plot(proj,pch=20,col="white",xlim=c(xminv,xmaxv),ylim=c(yminv,ymaxv),xaxt='n',yaxt='n',xlab="PC1",ylab="PC2",main=title)
points(proj, col=as.character(groups),pch=20) # , #pch=c(rep(15,3),rep(17,3),rep(19,3),rep(18,3),rep(20,2)), cex=2)
textxy(proj[,1],proj[,2],labs=colnames(m))
}
loadings.SVD <- function(m, comp=1, gene.ids = rownames(m)){
s <- svd(m)
l <- s$u[,comp]
names(l) <- gene.ids
l.s <- l[order(l)]
return(l.s)
}
plot.loadings.SVD <- function(m, comp=1, cutoff=0.1, gene.ids = rownames(m)){
l <- loadings.SVD(m, comp, gene.ids)
barplot(l[abs(l)>cutoff],las=2,main=paste("PC", comp, "cutoff", cutoff),cex.names=0.6)
}
plotPC <- function(matrix,a,b,desc,colors){
eig <- do.SVD(matrix, a, b)
proj <- project.SVD(matrix, eig)
xminv <- min(proj[,1]) - .2 * abs(min(proj[,1]))
xmaxv <- max(proj[,1]) + .2 * abs(max(proj[,1]))
yminv <- min(proj[,2]) - .2 * abs(min(proj[,2]))
ymaxv <- max(proj[,2]) + .2 * abs(max(proj[,2]))
plot(proj,pch=20,xlim=c(xminv,xmaxv),ylim=c(yminv,ymaxv),xaxt='n',yaxt='n',xlab=paste0("PC",a),ylab=paste("PC",b),col=colors,main=desc)
textxy(proj[,1],proj[,2],labs=rownames(proj))
}
library(biomaRt)
f_ids <- as.vector(f[,1])
#ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl") #select the ensembl database
#gene_type <- getBM(attributes=c("ensembl_gene_id", "gene_biotype"),
filters = "ensembl_gene_id",
values=f_ids,
mart=ensembl)
#pc <- subset(gene_type[,1],gene_type[,2]=="protein_coding")
#f_pc <- f[match(pc,f[,1]),]
library(biomaRt)
f_ids <- as.vector(f[,1])
#ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl") #select the ensembl database
#gene_type <- getBM(attributes=c("ensembl_gene_id", "gene_biotype"),
# filters = "ensembl_gene_id",
# values=f_ids,
# mart=ensembl)
#pc <- subset(gene_type[,1],gene_type[,2]=="protein_coding")
#f_pc <- f[match(pc,f[,1]),]
#f_pc_nozero <- f_pc[-which(rowSums(f_pc[,3:16])<=0.01),]
#write.table(f_pc_nozero, file="cufflinks_fpkm_proteincoding_nozero.txt", quote=F)
f_pc_nozero <- read.table(file="cufflinks_fpkm_proteincoding_nozero.txt")
pheatmap(cor(f_pc_nozero[,3:16], method="spearman"))
pheatmap(cor(f_pc_nozero[,3:16], method="spearman"))
pheatmap(cor(f_pc_nozero[,3:16]))
m <- melt(fpkms.log[,])
head(m)
m <- melt(fpkms.log[,3:ncol(fpkms.log)])
head(m)
colnames(m) <- c("sample_ID","log2FPKM")
data <- data.frame(m, tissue=tissue, study=study, prep=prep, layout=layout)
#subset <- data[sample(1:nrow(data), 1000),]
fit <- lm(log2FPKM ~ + prep + layout + study + tissue, data=data)
b <- anova(fit)
dim(f.pc.nonzero)
dim(f_pc_nonzero)
dim(f_pc_nozero)
dim(fpkms.log)
meta <- data.frame(tissue=c("brain","heart","kidney","brain","heart","kidney","brain","heart","kidney","brain","heart","kidney","brain","heart"),study=c("EoGE","EoGE","EoGE","Atlas","Atlas","Atlas","BodyMap","BodyMap","BodyMap","HPA","HPA","HPA","AltIso","AltIso"),prep=c(rep("poly-A",3),rep("rRNA-depl",3),rep("poly-A",8)),layout=c(rep("PE",3),rep("SE",3),rep("PE",6),rep("SE",2)))
rownames(meta) <- colnames(f_pc_nozero)[3:16]
tissue <- rep(meta$tissue, each=nrow(f_pc_nozero))
study <- rep(meta$study, each=nrow(f_pc_nozero))
prep <- rep(meta$prep, each=nrow(f_pc_nozero))
layout <- rep(meta$layout, each=nrow(f_pc_nozero))
data <- data.frame(m, tissue=tissue, study=study, prep=prep, layout=layout)
head(data)
fit <- lm(log2FPKM ~ + prep + layout + study + tissue, data=data)
b <- anova(fit)
barplot(b$"F value"[-5],names.arg=rownames(b)[-5],main="Anova F score, log2-RPKM",ylim=c(0,3000))
print(b)
