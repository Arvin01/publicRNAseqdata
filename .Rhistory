(4606+1699)/3
31390707 / 2
35607293 - 31390707
13319749 + 3150201
13319749 + 3150201 + 346347
5420+2000+1800+53363
50000+23055-8409-2063
A = rbind(c(0,0,0,0,55,78), c(19,0,21,3,81), c(0,48,50,1,0), c(0,0,33,0,67), c(95,0,0,0,31))
A = rbind(c(0,0,0,55,78), c(19,0,21,3,81), c(0,48,50,1,0), c(0,0,33,0,67), c(95,0,0,0,31))
A
B = rbinf(c(0,73,0,0,42), c(0,0,82,0,0), c(83,13,0,57,0), c(48,85,18,24,0), c(98,7,0,0,3))
B = rbind(c(0,73,0,0,42), c(0,0,82,0,0), c(83,13,0,57,0), c(48,85,18,24,0), c(98,7,0,0,3))
B
A * B
42*78
A %*% B
A
B
A[3,]
B[3,]
A[3,] %*% B[4,]
50*57 + 24
sum(A[3,] * B[4,])
sum(A[3,] * B[,4])
A[3,] %*% B[,4]
A
B
A %*% B
900/360
624*8.7
624*8.7 - 4500
0.44*0.01*39500
0.44*0.01*39500*30
754*8,7
754*8.7
754*8.7 - 450
2*1166
60/1.034
60/1.06
0.06*56.6
150/1.06
0.06*141.5094
0.12*39500
0.12*39500*1.5
105874108/4
12874856/4
12874856 / 105874108
8566340 / 4
3622260 / 2
5630336/4
1407584 +  1811130
10500-364-218
10500-364-218-2000
8*22*400
gamma(2)
gamma(3)
a = 6
b= 5
gamma(a+b)
gamma(a)*gamma(b)
b=2
a=1
gamma(a)*gamma(b)
gamma(a+b)
75*24*365
75*24*365*4 + 10000000 + 4*50000*12*0.5
4*50000*12*0.5
75*24*365*4 + 10000000 + 4*50000*12*0.5
(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4
(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4/365/24
(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4/365/24/3328
1200*(75*24*365*4 + 10000000 + 4*50000*12*0.5)/4/365/24/3328
34061207-34057793
?all
all(1:10==FALSE)
all(1:10==NULL)
1:10==NULL
logical(0)
all(logical(0))
3*43+3*30
3*43+3*30+3.15*34
3*43+3*30+6*14+3.15*34
3*43+3*30+6*14
3*43+3*30+6*14+3.15*34
3*43+3*30+6*14+40
3*43+3*30+6*14+3.15*34+40
360*1.25
76.5*9
source("http://bioconductor.org/biocLite.R")
biocLite("quantsmooth")
library(GenomeGraphs)
biocLite("GenomeGraphs")
library(GenomeGraphs)
library(biomaRt)
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")#
minbase <- 180292097#
maxbase <- 180492096
genesplus <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "+", chromosome = "3",#
biomart = mart)
genesmin <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "-", chromosome = "3",#
biomart = mart)#
seg <- makeSegmentation(segStart, segEnd,#
segments, dp = DisplayPars(color = "black",#
lwd = 2, lty = "solid"))
?makeGenericArray
ideo <- makeIdeogram(chromosome=11)
gdplot(list(a=ideo))
gdPlot(list(a=ideo))
gdPlot(list(a=ideo),minBase=0,maxBase=120000000)
minbase <- 13517534 #
maxbase <- 69458602#
#
ideo <- makeIdeogram(chromosome=11)
gdPlot(list(a=ideo),minBase=minbase,maxBase=maxbase)
gdPlot(list(a=ideo,b=makeGenomeAxis(add53=TRUE,add35=TRUE)),minBase=minbase,maxBase=maxbase)
?makeGeneRegion
genesplus <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "+", chromosome = "3",#
biomart = mart)
genesmin <- makeGeneRegion(start = minbase,#
end = maxbase, strand = "-", chromosome = "3",#
biomart = mart)
gdPlot(list(a=ideo,b=makeGenomeAxis(add53=TRUE,add35=TRUE),c=genesplus),minBase=minbase,maxBase=maxbase)
```
Try clustering with bootstrapping (pvclust) on gut samples.
568/700
568/780
282/440
63+131+240+532+131+287+298
198+190+85
198+190+85+429
782+1474
198+190
429+85
3185+2548+650+3251
191+153+39+195
9634*0.06
271*1.25
248*1.25
50000-10472-17790+37701+1918
52000*12
790000/12
71/47
2194/1877
1/(2194/1877)
224+114+168+209+40+65+332+215
11000-319-218-1367
?kruskal.test
539288
539288/4
4500 * 0.2897
4500 * 0.06
4500 + 270 + 1304 + 89
10500 - (89+94+58+83+466) - 317
10500 - (89+94+58+83+466) - 317 + 1100
10500 - (89+94+58+83+466) - 317 -218 + 1100
486*2 + 486*2.5*0.5
setwd("/Volumes/Time Machine Backups/MOOC")
source("http://bioconductor.org/biocLite.R")
biocLite('DESeq2')
biocLite('SRAdb')
s
samples
labels <- c("C02","C03","C06","C08","C09","C11","C13","C15","C19","C23","N02","N03","N06","N08","N09","N11","N13","N15","N19","N23")
samples <- c("SRR057629","SRR057630","SRR057632","SRR057634","SRR057635","SRR057636","SRR057637","SRR057638","SRR057641","SRR057642")
samples
labels
for (s in samples){
r1 = paste(s,"1.fastq.gz",sep="_")
r2 = paste(s,"2.fastq.gz",sep="_")
system(paste("gunzip", r1))
system(paste("gunzip", r2))
align(index="./my_index",readfile1=paste(s,"1.fastq",sep="_"),readfile2=paste(s,"2.fastq",sep="_"),output_file=paste(s,"sam",sep="."),nthreads=3,unique=TRUE)
}
library(Rsubread)
for (s in samples){
r1 = paste(s,"1.fastq.gz",sep="_")
r2 = paste(s,"2.fastq.gz",sep="_")
system(paste("gunzip", r1))
system(paste("gunzip", r2))
align(index="./my_index",readfile1=paste(s,"1.fastq",sep="_"),readfile2=paste(s,"2.fastq",sep="_"),output_file=paste(s,"sam",sep="."),nthreads=3,unique=TRUE)
}
ind <- rbind(c(2,4,6),c(56,57,58))
ind
afr <- rbind(c(0,0,3),c(40,30,20))
afr
pvals = apply(m, 1, function(r) t.test(ind,afr)$p.value)
t.test(ind[1,],afr[1,])
t.test(ind[1,],afr[1,])$p
t.test(ind[1,],afr[1,])$p.value
source("http://bioconductor.org/biocLite.R")
biocLite('DESeq2')
82+232+61+53+71+52+68
10500+500-619-343
10*1500*0.5
plotPC(f.nozero, 1, 2, "Published FPKM values \n SVD \n n=13333", colors=colors)
RawReads~SVDcomps: SVD-PC1="0.313026"SVD-PC2="0.299388"## MappedReads~SVDcomps: SVD-PC1="0.468184"SVD-PC2="0.129162"## Layout~SVDcomps: SVD-PC1="0.855132"SVD-PC2="0.361310"## Prep~SVDcomps: SVD-PC1="0.153042"SVD-PC2="0.220671"## Study~SVDcomps: SVD-PC1="0.368849"SVD-PC2="0.433066"## Tissue~SVDcomps: SVD-PC1="0.030197"SVD-PC2="0.106604"
x <- c(0.03, 0.10, 0.37, 0.43, 0.15, 0.22, 0.86, 0.36)
p.adjust(x)
x <- c(0.03, 0.10, 0.37, 0.43, 0.15, 0.22, 0.86, 0.36, 0.31, 0.30)
p.adjust(x)
setwd("~/Desktop/allt/PublicDataProject/tissuernaseq")
library(pheatmap)
library(calibrate)
library(sva)
normalize.voom <- function(counts){
require(limma)
return(voom(counts)$E)
}
do.SVD = function(m, comp.1=1, comp.2=2){ # returns eig.cell
s <- svd(m)
ev <- s$d^2 / sum(s$d^2)
return(s$u[,c(comp.1, comp.2)])
}
project.SVD <- function(m, eig.cell){
return(t(m) %*% eig.cell)
}
plot.SVD <- function(m, comp.1=1, comp.2=2, groups=rep("blue", ncol(m)), title=""){
eig <- do.SVD(m, comp.1, comp.2)
proj <- project.SVD(m, eig)
xminv <- min(proj[,1])  - .2 * abs(min(proj[,1]))
xmaxv <- max(proj[,1])  + .2 * abs(max(proj[,1]))
yminv <- min(proj[,2])  - .2 * abs(min(proj[,2]))
ymaxv <- max(proj[,2])  + .2 * abs(max(proj[,2]))
plot(proj,pch=20,col="white",xlim=c(xminv,xmaxv),ylim=c(yminv,ymaxv),xaxt='n',yaxt='n',xlab="PC1",ylab="PC2",main=title)
points(proj, col=as.character(groups),pch=20) # , #pch=c(rep(15,3),rep(17,3),rep(19,3),rep(18,3),rep(20,2)), cex=2)
#textxy(proj[,1],proj[,2],labs=colnames(m))
}
pub.merged <- read.delim("published_rpkms.txt",sep=" ")
info.pub <- read.table("sample_info_published.txt",header=TRUE)
repr.fpkm.nonzero <- read.table(file="cufflinks_fpkm_proteincoding_nozero.txt")
ensg <- repr.fpkm.nonzero [,1]
repr.fpkm.nonzero <- repr.fpkm.nonzero[,3:16]
rownames(repr.fpkm.nonzero) <- ensg
info.repr <- read.delim("sample_info_reprocessed.txt")
repr.counts <- read.delim("count_table.txt",row.names=1)
colnames(repr.counts)<-c("EoGE_brain","EoGE_heart","EoGE_kidney","Atlas_brain","Atlas_heart","Atlas_kidney","BodyMap_brain","BodyMap_heart","BodyMap_kidney","HPA_brain","HPA_heart","HPA_kidney","AltIso_brain","AltIso_heart")
repr.counts.nonzero <- repr.counts[rowSums(repr.counts)>0,]
new.colnames.published <- paste0("PUB-FPKM-",colnames(pub.merged))
new.colnames.fpkm <- paste0("REPR-FPKM-",colnames(repr.fpkm.nonzero))
new.colnames.counts <- paste0("REPR-CNTS-",colnames(repr.counts.nonzero))
new.colnames <- c(new.colnames.published,new.colnames.fpkm,new.colnames.counts)
common.ensg.temp <- intersect(rownames(pub.merged), rownames(repr.fpkm.nonzero))
common.ensg <- intersect(common.ensg.temp, rownames(repr.counts.nonzero))
data <- data.frame(pub.merged[common.ensg,], repr.fpkm.nonzero[common.ensg,], repr.counts.nonzero[common.ensg,])
colnames(data) <- new.colnames
colorvec <- rep("black", length(new.colnames))
colorvec[grep("heart", new.colnames)] <- "red"
colorvec[grep("brain", new.colnames)] <- "blue"
pheatmap(cor(data))
p <- prcomp(t(data))
plot(p$x[,1],p$x[,2],pch=20,xlab="PC1",ylab="PC2",col=colorvec,main="Default prcomp")
plot(p$x[,2],p$x[,3],pch=20,xlab="PC2",ylab="PC3",col=colorvec,main="Default prcomp")
p.sc <- prcomp(t(data),scale.=TRUE)
plot(p.sc$x[,1],p.sc$x[,2],pch=20,xlab="PC1",ylab="PC2",col=colorvec,main="Scaled prcomp")
plot(p.sc$x[,2],p.sc$x[,3],pch=20,xlab="PC2",ylab="PC3",col=colorvec,main="Scaled prcomp")
p.nm <- prcomp(t(data),center=FALSE)
plot(p.nm$x[,1],p.nm$x[,2],pch=20,xlab="PC1",ylab="PC2",col=colorvec,main="prcomp without centering") # This should be equal to the plot.SVD() function
plot(p.nm$x[,2],p.nm$x[,3],pch=20,xlab="PC2",ylab="PC3",col=colorvec,main="prcomp without centering") # This should be equal to the plot.SVD() function
plot.SVD(data, groups=colorvec)
pseudo <- 1
data.log <- log2((data + pseudo)/1e6)
p <- prcomp(t(data.log))
plot(p$x[,1],p$x[,2],pch=20,xlab="PC1",ylab="PC2",col=colorvec,main="log2, Default prcomp")
plot(p$x[,2],p$x[,3],pch=20,xlab="PC2",ylab="PC3",col=colorvec,main="log2, Default prcomp")
p.sc <- prcomp(t(data.log),scale.=TRUE)
plot(p.sc$x[,1],p.sc$x[,2],pch=20,xlab="PC1",ylab="PC2",col=colorvec,main="log2, Scaled prcomp")
plot(p.sc$x[,2],p.sc$x[,3],pch=20,xlab="PC2",ylab="PC3",col=colorvec,main="log2, Scaled prcomp")
p.nm <- prcomp(t(data.log),center=F)
plot(p.nm$x[,1],p.nm$x[,2],pch=20,xlab="PC1",ylab="PC2",col=colorvec,main="log2, prcomp without centering") # This should be equal to the plot.SVD() function
plot(p.nm$x[,2],p.nm$x[,3],pch=20,xlab="PC2",ylab="PC3",col=colorvec,main="log2, prcomp without centering") # This should be equal to the plot.SVD() function
pub.merged.log <- log2(pub.merged + pseudo)
repr.fpkm.nonzero.log <- log2(repr.fpkm.nonzero + pseudo)
repr.counts.nonzero.log <- log2(repr.counts.nonzero + pseudo)
repr.counts.log <- normalize.voom(repr.counts) # voom also normalizes by lib size
#repr.counts.log <- log2( (repr.counts+0.5)/(1e6+1))
p.pub <- prcomp(t(pub.merged.log))
cols.pub <- rep("black", length(colnames(pub.merged.log)))
cols.pub[grep("heart",colnames(pub.merged.log))] <- "red"
cols.pub[grep("brain",colnames(pub.merged.log))] <- "blue"
p.fpkm <- prcomp(t(repr.fpkm.nonzero.log))
cols.fpkm <- rep("black", length(colnames(repr.fpkm.nonzero.log)))
cols.fpkm[grep("heart",colnames(repr.fpkm.nonzero.log))] <- "red"
cols.fpkm[grep("brain",colnames(repr.fpkm.nonzero.log))] <- "blue"
p.counts <- prcomp(t(repr.counts.log))
cols.counts <- rep("black", length(colnames(repr.counts.log)))
cols.counts[grep("heart",colnames(repr.counts.log))] <- "red"
cols.counts[grep("brain",colnames(repr.counts.log))] <- "blue"
par(mfrow=c(3,1))
plot(p.pub$x[,2],p.pub$x[,3],pch=20,xlab="PC2",ylab="PC3",col=cols.pub,main="Published RPKMs (log2), PC 2-3")
plot(p.fpkm$x[,2],p.fpkm$x[,3],pch=20,xlab="PC2",ylab="PC3",col=cols.fpkm,main="Reprocessed FPKMs (log2), PC 2-3")
plot(p.counts$x[,2],p.counts$x[,3],pch=20,xlab="PC2",ylab="PC3",col=cols.counts,main="Reprocessed counts (log2), PC 2-3")
par(mfrow=c(3,3))
for (i in 2:4){
for (j in 2:4){
if (i < j){
plot(p.pub$x[,i],p.pub$x[,j],pch=20,xlab=paste0("PC", i),ylab=paste0("PC",j),col=cols.pub,main="Published RPKMs (log2)")
plot(p.fpkm$x[,i],p.fpkm$x[,j],pch=20,xlab=paste0("PC", i),ylab=paste0("PC",j),col=cols.fpkm,main="Reprocessed FPKMs (log2)")
plot(p.counts$x[,i],p.counts$x[,j],pch=20,xlab=paste0("PC", i),ylab=paste0("PC",j),col=cols.counts,main="Reprocessed counts (log2)")
}}}
pheno <- read.delim("sample_info_published.txt")
expr.nozero <- pub.merged[which(rowSums(pub.merged)>0),] # required for SVA to work?
mod <- model.matrix(~as.factor(Tissue), data=pheno)
mod0 <- model.matrix(~1,data=pheno)
n.sv <- num.sv(pub.merged.log,mod,method="leek") # 8 (!)
svobj <- sva(as.matrix(pub.merged.log),mod,mod0,n.sv=n.sv)
pheno <- read.delim("sample_info_reprocessed.txt")
mod <- model.matrix(~as.factor(Tissue), data=pheno)
mod0 <- model.matrix(~1,data=pheno)
n.sv <- num.sv(repr.fpkm.nonzero.log,mod,method="leek")
svobj <- sva(as.matrix(repr.fpkm.nonzero.log),mod,mod0,n.sv=n.sv)
l <- svobj$sv # the matrix with 3 surrogate variables
rownames(l) <- colnames(repr.fpkm.nonzero.log)
heatmap(l,scale="none")
pheno <- read.delim("sample_info_reprocessed.txt")
mod <- model.matrix(~as.factor(Tissue), data=pheno)
mod0 <- model.matrix(~1,data=pheno)
n.sv <- num.sv(repr.counts.nonzero,mod,method="leek")
svobj <- sva(as.matrix(repr.counts.nonzero),mod,mod0,n.sv=n.sv)
l <- svobj$sv # the matrix with 3 surrogate variables
rownames(l) <- colnames(repr.fpkm.nonzero.log)
heatmap(l,scale="none")
pheno <- read.delim("sample_info_reprocessed.txt")
mod <- model.matrix(~as.factor(Tissue), data=pheno)
mod0 <- model.matrix(~1,data=pheno)
n.sv <- num.sv(repr.counts.nonzero.log,mod,method="leek")
svobj <- sva(as.matrix(repr.counts.nonzero.log),mod,mod0,n.sv=n.sv)
l <- svobj$sv # the matrix with 3 surrogate variables
rownames(l) <- colnames(repr.fpkm.nonzero.log)
heatmap(l,scale="none")
l
cor(l, pheno$Study)
cor(l, as.numeric(pheno$Study))
cor(l, pheno$readlength)
cor(l, as.numeric(pheno$readlength))
cor(l, as.numeric(pheno$Preparation))
cor(l, pheno$Readtype)
cor(l, pheno$NumberRaw)
head(repr.counts.nonzero.log)
rowSums(repr.counts.nonzero.log)
colSums(repr.counts.nonzero.log)
barplot(colSums(repr.counts.nonzero.log))
cor(l, pheno$Numbermapped)
